#!/usr/bin/env node
import {intro,cancel,select,isCancel,log,outro,group,text,confirm}from'@clack/prompts';import {x as x$1}from'tinyexec';function r(e){return e.replaceAll("\\n",`
`)}async function b(e){let t=await group({type:()=>select({message:"Pick the type of commit",options:[{value:"build",hint:"Changes that affect the build system or external dependencies"},{value:"chore",hint:"Other changes that don't modify src or test files"},{value:"ci",hint:"Changes to our CI configuration files and scripts"},{value:"docs",hint:"Documentation only changes"},{value:"feat",hint:"A new feature"},{value:"fix",hint:"A bug fix"},{value:"perf",hint:"A code change that improves performance"},{value:"refactor",hint:"A code change that neither fixes a bug nor adds a feature"},{value:"revert",hint:"Reverts a previous commit"},{value:"style",hint:"Changes that do not affect the meaning of the code"},{value:"test",hint:"Adding missing tests or correcting existing tests"}]}),scope:()=>text({message:"What is the scope of this change (e.g. component or file name)",placeholder:"press enter to skip",validate(i){if(i.includes("\\n"))return "line breaks (\\n) are not allowed"}}),breaking:()=>confirm({message:"Are there any breaking changes?",initialValue:false}),shortDescription:()=>text({message:"Short description",validate(i){if(i.length===0)return "Short description is required";if(i.includes("\\n"))return "line breaks (\\n) are not allowed"}})},{onCancel:e}),a=`${t.type}${t.scope?`(${t.scope})`:""}${t.breaking?"!":""}: ${t.shortDescription}`;a.length>72&&(confirm({message:`First line is above 72 characters. Do you still want to continue? (${a})`})||e());let o;if(t.breaking){let i=await text({message:"Describe the breaking change (\\n for line breaks)",placeholder:"press enter to skip"});isCancel(i)?e():o=i;}let n=await text({message:"Longer description (\\n for line breaks)",placeholder:"press enter to skip"});isCancel(n)&&e();let h=[];for(;;){let i=await confirm({message:`Add ${h.length>0?"another ":""}footer?`,initialValue:false});if(isCancel(i)&&e(),i){let y=await text({message:"footer token (e.g. Fix, Reviewed-by, Refs)",validate(d){if(d.length===0)return "token is required";if(d.includes("\\n"))return "line breaks (\\n) are not allowed"}});isCancel(y)&&e();let k=await text({message:"footer token (e.g. Fix, Reviewed-by, Refs)",validate(d){if(d.length===0)return "value is required"}});isCancel(k)&&e(),h.push(`${y.trim().replaceAll(/\s/g,"-")}: ${r(k)}`);}else break}return `${a}
  
${n?r(n):""}

${o?`BREAKING CHANGE: ${r(o)}`:""}
${h.join(`
`)}
`.trim()}async function w(){return (await x$1("git",["diff","--name-only","--staged"])).stdout.length>0}async function x(){return (await x$1("git",["rev-parse","--is-inside-work-tree"])).stdout.includes("true")}async function C(e){return await x$1("git",["commit","-m",e])}async function $(e){let t=await group({type:()=>select({message:"Pick the type of commit",options:P}),scope:()=>text({message:"What is the scope of this change (e.g. component or file name)",placeholder:"press enter to skip",validate(n){if(n.includes("\\n"))return "line breaks (\\n) are not allowed"}}),shortDescription:()=>text({message:"Short description",validate(n){if(n.length===0)return "Short description is required";if(n.includes("\\n"))return "line breaks (\\n) are not allowed"}})},{onCancel:e}),a=`${t.type} ${t.scope?`(${t.scope}): `:""}${t.shortDescription}`;a.length>72&&(confirm({message:`First line is above 72 characters. Do you still want to continue? (${a})`})||e());let o=await text({message:"Longer description (\\n for line breaks)",placeholder:"press enter to skip"});return isCancel(o)&&e(),`${a}
  
${o?r(o):""}
`.trim()}var P=[{value:"\u{1F3A8}",hint:"Improve structure / format of the code."},{value:"\u26A1\uFE0F",hint:"Improve performance."},{value:"\u{1F525}",hint:"Remove code or files."},{value:"\u{1F41B}",hint:"Fix a bug."},{value:"\u{1F691}\uFE0F",hint:"Critical hotfix."},{value:"\u2728",hint:"Introduce new features."},{value:"\u{1F4DD}",hint:"Add or update documentation."},{value:"\u{1F680}",hint:"Deploy stuff."},{value:"\u{1F484}",hint:"Add or update the UI and style files."},{value:"\u{1F389}",hint:"Begin a project."},{value:"\u2705",hint:"Add, update, or pass tests."},{value:"\u{1F512}\uFE0F",hint:"Fix security or privacy issues."},{value:"\u{1F510}",hint:"Add or update secrets."},{value:"\u{1F516}",hint:"Release / Version tags."},{value:"\u{1F6A8}",hint:"Fix compiler / linter warnings."},{value:"\u{1F6A7}",hint:"Work in progress."},{value:"\u{1F49A}",hint:"Fix CI Build."},{value:"\u2B07\uFE0F",hint:"Downgrade dependencies."},{value:"\u2B06\uFE0F",hint:"Upgrade dependencies."},{value:"\u{1F4CC}",hint:"Pin dependencies to specific versions."},{value:"\u{1F477}",hint:"Add or update CI build system."},{value:"\u{1F4C8}",hint:"Add or update analytics or track code."},{value:"\u267B\uFE0F",hint:"Refactor code."},{value:"\u2795",hint:"Add a dependency."},{value:"\u2796",hint:"Remove a dependency."},{value:"\u{1F527}",hint:"Add or update configuration files."},{value:"\u{1F528}",hint:"Add or update development scripts."},{value:"\u{1F310}",hint:"Internationalization and localization."},{value:"\u270F\uFE0F",hint:"Fix typos."},{value:"\u{1F4A9}",hint:"Write bad code that needs to be improved."},{value:"\u23EA\uFE0F",hint:"Revert changes."},{value:"\u{1F500}",hint:"Merge branches."},{value:"\u{1F4E6}\uFE0F",hint:"Add or update compiled files or packages."},{value:"\u{1F47D}\uFE0F",hint:"Update code due to external API changes."},{value:"\u{1F69A}",hint:"Move or rename resources (e.g.: files, paths, routes)."},{value:"\u{1F4C4}",hint:"Add or update license."},{value:"\u{1F4A5}",hint:"Introduce breaking changes."},{value:"\u{1F371}",hint:"Add or update assets."},{value:"\u267F\uFE0F",hint:"Improve accessibility."},{value:"\u{1F4A1}",hint:"Add or update comments in source code."},{value:"\u{1F37B}",hint:"Write code drunkenly."},{value:"\u{1F4AC}",hint:"Add or update text and literals."},{value:"\u{1F5C3}\uFE0F",hint:"Perform database related changes."},{value:"\u{1F50A}",hint:"Add or update logs."},{value:"\u{1F507}",hint:"Remove logs."},{value:"\u{1F465}",hint:"Add or update contributor(s)."},{value:"\u{1F6B8}",hint:"Improve user experience / usability."},{value:"\u{1F3D7}\uFE0F",hint:"Make architectural changes."},{value:"\u{1F4F1}",hint:"Work on responsive design."},{value:"\u{1F921}",hint:"Mock things."},{value:"\u{1F95A}",hint:"Add or update an easter egg."},{value:"\u{1F648}",hint:"Add or update a .gitignore file."},{value:"\u{1F4F8}",hint:"Add or update snapshots."},{value:"\u2697\uFE0F",hint:"Perform experiments."},{value:"\u{1F50D}\uFE0F",hint:"Improve SEO."},{value:"\u{1F3F7}\uFE0F",hint:"Add or update types."},{value:"\u{1F331}",hint:"Add or update seed files."},{value:"\u{1F6A9}",hint:"Add, update, or remove feature flags."},{value:"\u{1F945}",hint:"Catch errors."},{value:"\u{1F4AB}",hint:"Add or update animations and transitions."},{value:"\u{1F5D1}\uFE0F",hint:"Deprecate code that needs to be cleaned up."},{value:"\u{1F6C2}",hint:"Work on code related to authorization, roles and permissions."},{value:"\u{1FA79}",hint:"Simple fix for a non-critical issue."},{value:"\u{1F9D0}",hint:"Data exploration/inspection."},{value:"\u26B0\uFE0F",hint:"Remove dead code."},{value:"\u{1F9EA}",hint:"Add a failing test."},{value:"\u{1F454}",hint:"Add or update business logic."},{value:"\u{1FA7A}",hint:"Add or update healthcheck."},{value:"\u{1F9F1}",hint:"Infrastructure related changes."},{value:"\u{1F9D1}\u200D\u{1F4BB}",hint:"Improve developer experience."},{value:"\u{1F4B8}",hint:"Add sponsorships or money related infrastructure."},{value:"\u{1F9F5}",hint:"Add or update code related to multithreading or concurrency."},{value:"\u{1F9BA}",hint:"Add or update code related to validation."}];intro("Commit help");await x()||(cancel("Not a git repository (or any of the parent directories)"),process.exit(0));await w()||(cancel("Nothing added to commit"),process.exit(0));function g(){return cancel("Aborting commit"),process.exit(0)}var A=await select({message:"Style",options:[{value:"conventional",label:"Conventional Commits"},{value:"gitmoji",label:"Gitmoji"}]});isCancel(A)&&g();var c;A==="conventional"&&(c=await b(g));A==="gitmoji"&&(c=await $(g));if(!c)throw new Error("not valid commit message");var m=await C(c);m.exitCode!==0&&(cancel(m.stderr),process.exit(0));log.success(m.stdout.trim());outro("commit successfull");