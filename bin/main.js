#!/usr/bin/env node
import {intro,cancel,select,isCancel,log,outro,group,text,confirm}from'@clack/prompts';import {x as x$1}from'tinyexec';async function w(){return (await x$1("git",["diff","--name-only","--staged"])).stdout.length>0}async function k(){return (await x$1("git",["rev-parse","--is-inside-work-tree"])).stdout.includes("true")}async function b(e){return await x$1("git",["commit","-m",e])}function y(e){return e.replaceAll("\\n",`
`)}async function x(e){let i=await group({type:()=>select({message:"Pick the type of commit",options:[{value:"build",hint:"Changes that affect the build system or external dependencies"},{value:"chore",hint:"Other changes that don't modify src or test files"},{value:"ci",hint:"Changes to our CI configuration files and scripts"},{value:"docs",hint:"Documentation only changes"},{value:"feat",hint:"A new feature"},{value:"fix",hint:"A bug fix"},{value:"perf",hint:"A code change that improves performance"},{value:"refactor",hint:"A code change that neither fixes a bug nor adds a feature"},{value:"revert",hint:"Reverts a previous commit"},{value:"style",hint:"Changes that do not affect the meaning of the code"},{value:"test",hint:"Adding missing tests or correcting existing tests"}]}),scope:()=>text({message:"What is the scope of this change (e.g. component or file name)",placeholder:"press enter to skip",validate(t){if(t.includes("\\n"))return "line breaks (\\n) are not allowed"}}),breaking:()=>confirm({message:"Are there any breaking changes?",initialValue:false}),shortDescription:()=>text({message:"Short description",validate(t){if(t.length===0)return "Short description is required";if(t.includes("\\n"))return "line breaks (\\n) are not allowed"}})},{onCancel:e}),c=`${i.type}${i.scope?`(${i.scope})`:""}${i.breaking?"!":""}: ${i.shortDescription}`;c.length>72&&(confirm({message:`First line is above 72 characters. Do you still want to continue? (${c})`})||e());let l;if(i.breaking){let t=await text({message:"Describe the breaking change (\\n for line breaks)",placeholder:"press enter to skip"});isCancel(t)?e():l=t;}let d=await text({message:"Longer description (\\n for line breaks)",placeholder:"press enter to skip"});isCancel(d)&&e();let p="";for(;;){let t=await confirm({message:"Add footer?",initialValue:false});if(isCancel(t)&&e(),t){let h=await text({message:"footer token (e.g. Fix, Reviewed-by, Refs)",validate(s){if(s.length===0)return "token is required";if(s.includes("\\n"))return "line breaks (\\n) are not allowed"}});isCancel(h)&&e();let v=await text({message:"footer token (e.g. Fix, Reviewed-by, Refs)",validate(s){if(s.length===0)return "value is required"}});isCancel(v)&&e(),p+=`${h.trim().replaceAll(/\s/g,"-")}: ${y(v)}`;}else break}return `${c}
  
  ${d}

  ${l?`BREAKING CHANGE: ${l}`:""}
  ${p}
  `.trim()}intro("Commit help");await k()||(cancel("Not a git repository (or any of the parent directories)"),process.exit(0));await w()||(cancel("Nothing added to commit"),process.exit(0));function C(){return cancel("Aborting commit"),process.exit(0)}var g=await select({message:"Style",options:[{value:"conventional",label:"Conventional Commits"},{value:"gitmoji",label:"Gitmoji"}]});isCancel(g)&&C();var a;g==="conventional"&&(a=await x(C));g==="gitmoji"&&(a="");if(!a)throw new Error("not valid commit message");var m=await b(a);m.exitCode!==0&&(cancel(m.stderr),process.exit(0));log.success(m.stdout.trim());outro("commit successfull");